From 8624afb21592d5e3f90fa9474910986705564310 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Thu, 19 Nov 2020 15:59:50 -0600
Subject: [PATCH] Squashed commit of the following:

commit 0114f9a6b40e5a5b4d4ad0e7886f95bfa6317e19
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Tue Oct 27 15:38:20 2020 -0400

    Add --force to daos_ssd format cmd

commit 1161d065973f2ec4c289c1a54f068007c411e51d
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Tue Oct 27 12:41:08 2020 -0400

    Added daos_ssd utility to format NVMe SSDs

    Usage:
      daos_ssd format -p <addr> -p <addr>
    -- or --
      daos_ssd -o /path/to/server.yml format

commit a18de8c904631ffb38e7caff9e84583c1f1ca678
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Thu Oct 22 15:45:30 2020 -0400

    more hax

    Make StorageControlService.Setup() return early before talking
    to SPDK -- this won't work without the daos_admin process
    separation.

commit 42201e9cb805167349379c8c90ab8a4343b36ecd
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Fri Oct 16 12:16:39 2020 -0400

    don't try to scan SCM

commit bd4ea9088fbb802d87bef81087dfc8f744291f29
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Thu Oct 15 16:28:09 2020 -0400

    disable automatic NVMe prepare

commit ac21f2c1ecab8e4ff8ec48247c62f07a3344e1cd
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Thu Feb 20 14:20:37 2020 -0500

    TACC: Allow forwarding to be disabled

    Apply this patch against release/0.9 (may work with master, untested)
    in order to remove a hard requirement on forwarding requests to
    daos_admin. As before, DAOS_DISABLE_REQ_FWD=true will disable forwarding
    to daos_admin.

    Please note that this is an unsupported configuration, and future work
    will likely remove all ability for daos_server to operate independently
    of daos_admin.
---
 src/control/SConscript                     |   4 +-
 src/control/cmd/daos_ssd/config.go         |  70 ++++++++++++
 src/control/cmd/daos_ssd/main.go           | 124 +++++++++++++++++++++
 src/control/cmd/daos_ssd/storage.go        | 100 +++++++++++++++++
 src/control/pbin/forwarding.go             |  11 ++
 src/control/pbin/pbin.go                   |   8 ++
 src/control/server/ctl_storage.go          |   3 +
 src/control/server/server.go               |  23 ++--
 src/control/server/storage/scm/provider.go |   4 +
 9 files changed, 337 insertions(+), 10 deletions(-)
 create mode 100644 src/control/cmd/daos_ssd/config.go
 create mode 100644 src/control/cmd/daos_ssd/main.go
 create mode 100644 src/control/cmd/daos_ssd/storage.go

diff --git a/src/control/SConscript b/src/control/SConscript
index df7540993..18ac444fc 100644
--- a/src/control/SConscript
+++ b/src/control/SConscript
@@ -223,6 +223,8 @@ def scons():
 
     serverbin = install_go_bin(senv, gosrc, [denv.nvmecontrol], "daos_server",
                                "daos_server")
+    ssdbin = install_go_bin(senv, gosrc, [denv.nvmecontrol], "daos_ssd",
+                               "daos_ssd")
 
     #Admin binary is expected to be relocated so origin based paths are useless
     aenv = senv.Clone()
@@ -234,7 +236,7 @@ def scons():
     adminbin = install_go_bin(aenv, gosrc, [denv.nvmecontrol], "daos_admin",
                               "daos_admin")
 
-    AlwaysBuild([serverbin, adminbin])
+    AlwaysBuild([serverbin, adminbin, ssdbin])
 
     if is_firmware_mgmt_build(denv):
         print("(EXPERIMENTAL) Building DAOS firmware tools")
diff --git a/src/control/cmd/daos_ssd/config.go b/src/control/cmd/daos_ssd/config.go
new file mode 100644
index 000000000..32602ec8a
--- /dev/null
+++ b/src/control/cmd/daos_ssd/config.go
@@ -0,0 +1,70 @@
+//
+// (C) Copyright 2020 Intel Corporation.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
+// The Government's rights to use, modify, reproduce, release, perform, display,
+// or disclose this software are subject to the terms of the Apache License as
+// provided in Contract No. 8F-30005.
+// Any reproduction of computer software, computer software documentation, or
+// portions thereof marked with this legend must also reproduce the markings.
+//
+
+package main
+
+import (
+	"github.com/daos-stack/daos/src/control/server"
+)
+
+type cfgLoader interface {
+	loadConfig() error
+	configPath() string
+	setPath(cfgPath string)
+}
+
+type cliOverrider interface {
+	setCLIOverrides() error
+}
+
+type cfgCmd struct {
+	cfgPath string
+	config  *server.Configuration
+}
+
+func (c *cfgCmd) setPath(cp string) {
+	c.cfgPath = cp
+}
+
+func (c *cfgCmd) configPath() string {
+	if c.config == nil {
+		return ""
+	}
+	return c.config.Path
+}
+
+func (c *cfgCmd) loadConfig() error {
+	// Don't load a new config if there's already
+	// one present. If the caller really wants to
+	// reload, it can do that explicitly.
+	if c.config != nil {
+		return nil
+	}
+
+	c.config = server.NewConfiguration()
+	if err := c.config.SetPath(c.cfgPath); err != nil {
+		return err
+	}
+
+	return c.config.Load()
+}
diff --git a/src/control/cmd/daos_ssd/main.go b/src/control/cmd/daos_ssd/main.go
new file mode 100644
index 000000000..66c4214f5
--- /dev/null
+++ b/src/control/cmd/daos_ssd/main.go
@@ -0,0 +1,124 @@
+//
+// (C) Copyright 2020 Intel Corporation.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
+// The Government's rights to use, modify, reproduce, release, perform, display,
+// or disclose this software are subject to the terms of the Apache License as
+// provided in Contract No. 8F-30005.
+// Any reproduction of computer software, computer software documentation, or
+// portions thereof marked with this legend must also reproduce the markings.
+//
+
+package main
+
+import (
+	"os"
+	"path"
+
+	"github.com/jessevdk/go-flags"
+	"github.com/pkg/errors"
+
+	"github.com/daos-stack/daos/src/control/build"
+	"github.com/daos-stack/daos/src/control/fault"
+	"github.com/daos-stack/daos/src/control/lib/netdetect"
+	"github.com/daos-stack/daos/src/control/logging"
+)
+
+const (
+	defaultConfigFile = "daos_server.yml"
+)
+
+type mainOpts struct {
+	// Minimal set of top-level options
+	ConfigPath string `short:"o" long:"config" description:"Server config file path"`
+	Debug      bool   `short:"d" long:"debug" description:"Enable debug output"`
+
+	// Define subcommands
+	FormatSSD formatSSDCmd `command:"format" alias:"f" description:"Format NVMe storage"`
+}
+
+type cmdLogger interface {
+	setLog(*logging.LeveledLogger)
+}
+
+type logCmd struct {
+	log *logging.LeveledLogger
+}
+
+func (c *logCmd) setLog(log *logging.LeveledLogger) {
+	c.log = log
+	// Initialize the netdetect logger
+	netdetect.SetLogger(log)
+}
+
+func exitWithError(log *logging.LeveledLogger, err error) {
+	log.Debugf("%+v", err)
+	log.Errorf("%v", err)
+	if fault.HasResolution(err) {
+		log.Error(fault.ShowResolutionFor(err))
+	}
+	os.Exit(1)
+}
+
+func parseOpts(args []string, opts *mainOpts, log *logging.LeveledLogger) error {
+	p := flags.NewParser(opts, flags.HelpFlag|flags.PassDoubleDash)
+	p.SubcommandsOptional = false
+	p.CommandHandler = func(cmd flags.Commander, cmdArgs []string) error {
+		if len(cmdArgs) > 0 {
+			// don't support positional arguments, extra cmdArgs are unexpected
+			return errors.Errorf("unexpected commandline arguments: %v", cmdArgs)
+		}
+
+		if opts.Debug {
+			log.SetLevel(logging.LogLevelDebug)
+		}
+		if logCmd, ok := cmd.(cmdLogger); ok {
+			logCmd.setLog(log)
+		}
+
+		if opts.ConfigPath == "" {
+			defaultConfigPath := path.Join(build.ConfigDir, defaultConfigFile)
+			if _, err := os.Stat(defaultConfigPath); err == nil {
+				opts.ConfigPath = defaultConfigPath
+			}
+		}
+		if cfgCmd, ok := (cmd.(cfgLoader)); ok {
+			cfgCmd.setPath(opts.ConfigPath)
+		}
+
+		if err := cmd.Execute(cmdArgs); err != nil {
+			return err
+		}
+
+		return nil
+	}
+
+	// Parse commandline flags which override options loaded from config.
+	_, err := p.ParseArgs(args)
+	if err != nil {
+		return err
+	}
+
+	return nil
+}
+
+func main() {
+	log := logging.NewCommandLineLogger()
+	var opts mainOpts
+
+	if err := parseOpts(os.Args[1:], &opts, log); err != nil {
+		exitWithError(log, err)
+	}
+}
diff --git a/src/control/cmd/daos_ssd/storage.go b/src/control/cmd/daos_ssd/storage.go
new file mode 100644
index 000000000..e2ae86eb6
--- /dev/null
+++ b/src/control/cmd/daos_ssd/storage.go
@@ -0,0 +1,100 @@
+//
+// (C) Copyright 2020 Intel Corporation.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
+// The Government's rights to use, modify, reproduce, release, perform, display,
+// or disclose this software are subject to the terms of the Apache License as
+// provided in Contract No. 8F-30005.
+// Any reproduction of computer software, computer software documentation, or
+// portions thereof marked with this legend must also reproduce the markings.
+//
+
+package main
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/daos-stack/daos/src/control/common"
+	"github.com/daos-stack/daos/src/control/server"
+	"github.com/daos-stack/daos/src/control/server/storage"
+	"github.com/daos-stack/daos/src/control/server/storage/bdev"
+	"github.com/pkg/errors"
+)
+
+type formatSSDCmd struct {
+	logCmd
+	cfgCmd
+	PCIAddrs []string `short:"p" long:"pci-addr" description:"Format specified PCI Address(es) (formats all in config by default)"`
+	Force    bool     `short:"f" long:"force" description:"Do not prompt for confirmation; just format"`
+}
+
+func cfgBdevs(cfg *server.Configuration) (bdevList []string) {
+	for _, srv := range cfg.Servers {
+		bdevList = append(bdevList, srv.Storage.Bdev.DeviceList...)
+	}
+
+	return
+}
+
+func (cmd *formatSSDCmd) Execute(_ []string) error {
+	bp := bdev.DefaultProvider(cmd.log)
+
+	formatList := cmd.PCIAddrs
+	if len(cmd.PCIAddrs) == 0 {
+		if err := cmd.loadConfig(); err != nil {
+			return errors.Wrapf(err, "failed to load config from %s", cmd.configPath())
+		}
+		cmd.log.Infof("DAOS Server config loaded from %s", cmd.configPath())
+
+		formatList = cfgBdevs(cmd.config)
+	}
+
+	if len(formatList) == 0 {
+		return errors.New("no devices specified in format")
+	}
+
+	cmd.log.Infof("device(s) to format: %s", strings.Join(formatList, ", "))
+
+	if !cmd.Force && !common.GetConsent(cmd.log) {
+		return errors.New("try again and respond yes if you want to format")
+	}
+
+	fReq := bdev.FormatRequest{
+		Class:      storage.BdevClassNvme,
+		DeviceList: formatList,
+	}
+	fReq.Forwarded = true // hack; don't try to forward to daos_admin
+
+	fResp, err := bp.Format(fReq)
+	if err != nil {
+		return err
+	}
+
+	var results strings.Builder
+	for dev, resp := range fResp.DeviceResponses {
+		var status string
+		if resp.Formatted {
+			status = "success"
+		} else {
+			status = resp.Error.Error()
+		}
+		fmt.Fprintf(&results, "  %s: %s\n", dev, status)
+	}
+
+	cmd.log.Info(results.String())
+
+	return nil
+}
diff --git a/src/control/pbin/forwarding.go b/src/control/pbin/forwarding.go
index cb831195d..dca863a21 100644
--- a/src/control/pbin/forwarding.go
+++ b/src/control/pbin/forwarding.go
@@ -26,6 +26,7 @@ import (
 	"context"
 	"encoding/json"
 	"os"
+	"strconv"
 
 	"github.com/pkg/errors"
 
@@ -69,6 +70,16 @@ func NewForwarder(log logging.Logger, pbinName string) *Forwarder {
 		pbinName: pbinName,
 	}
 
+	if val, set := os.LookupEnv(DisableReqFwdEnvVar); set {
+		disabled, err := strconv.ParseBool(val)
+		if err != nil {
+			log.Errorf("%s was set to non-boolean value (%q); not disabling",
+				DisableReqFwdEnvVar, val)
+			return fwd
+		}
+		fwd.Disabled = disabled
+	}
+
 	return fwd
 }
 
diff --git a/src/control/pbin/pbin.go b/src/control/pbin/pbin.go
index 4bd705883..0ac91698e 100644
--- a/src/control/pbin/pbin.go
+++ b/src/control/pbin/pbin.go
@@ -36,6 +36,10 @@ const (
 	// DaosAdminName is the name of the daos_admin privileged helper.
 	DaosAdminName = "daos_admin"
 
+	// DisableReqFwdEnvVar is the name of the environment variable which
+	// can be set to disable forwarding requests to the privileged binary.
+	DisableReqFwdEnvVar = "DAOS_DISABLE_REQ_FWD"
+
 	// DaosAdminLogFileEnvVar is the name of the environment variable which
 	// can be set to enable non-ERROR logging in the privileged binary.
 	DaosAdminLogFileEnvVar = "DAOS_ADMIN_LOG_FILE"
@@ -63,6 +67,10 @@ func CheckHelper(log logging.Logger, helperName string) error {
 	dummy := struct{}{}
 	pingRes := PingResp{}
 
+	if fwd.Disabled {
+		return nil
+	}
+
 	if err := fwd.SendReq("Ping", dummy, &pingRes); err != nil {
 		err = errors.Cause(err)
 		switch {
diff --git a/src/control/server/ctl_storage.go b/src/control/server/ctl_storage.go
index b5efa835d..2e197526a 100644
--- a/src/control/server/ctl_storage.go
+++ b/src/control/server/ctl_storage.go
@@ -136,6 +136,9 @@ func (c *StorageControlService) canAccessBdevs(sr *bdev.ScanResponse) (missing [
 
 // Setup delegates to Storage implementation's Setup methods.
 func (c *StorageControlService) Setup() error {
+	c.log.Error("Setup() not supported on Endeavour")
+	return nil
+
 	sr, err := c.NvmeScan(bdev.ScanRequest{})
 	if err != nil {
 		c.log.Debugf("%s\n", errors.Wrap(err, "Warning, NVMe Scan"))
diff --git a/src/control/server/server.go b/src/control/server/server.go
index 6d7e0dffe..c0430b1c9 100644
--- a/src/control/server/server.go
+++ b/src/control/server/server.go
@@ -153,22 +153,27 @@ func Start(log *logging.LeveledLogger, cfg *Configuration) error {
 		}
 	}
 
-	log.Debugf("automatic NVMe prepare req: %+v", prepReq)
-	if _, err := bdevProvider.Prepare(prepReq); err != nil {
-		log.Errorf("automatic NVMe prepare failed (check configuration?)\n%s", err)
-	}
+	/*
+		log.Debugf("automatic NVMe prepare req: %+v", prepReq)
+		if _, err := bdevProvider.Prepare(prepReq); err != nil {
+			log.Errorf("automatic NVMe prepare failed (check configuration?)\n%s", err)
+		}
+	*/
+	log.Info("automatic NVMe prepare disabled on Endeavour")
 
 	hugePages, err := getHugePageInfo()
 	if err != nil {
 		return errors.Wrap(err, "unable to read system hugepage info")
 	}
 
-	if cfgHasBdev(cfg) {
-		// Double-check that we got the requested number of huge pages after prepare.
-		if hugePages.Free < prepReq.HugePageCount {
-			return FaultInsufficientFreeHugePages(hugePages.Free, prepReq.HugePageCount)
+	/*
+		if cfgHasBdev(cfg) {
+			// Double-check that we got the requested number of huge pages after prepare.
+			if hugePages.Free < prepReq.HugePageCount {
+				return FaultInsufficientFreeHugePages(hugePages.Free, prepReq.HugePageCount)
+			}
 		}
-	}
+	*/
 
 	// If this daos_server instance ends up being the MS leader,
 	// this will record the DAOS system membership.
diff --git a/src/control/server/storage/scm/provider.go b/src/control/server/storage/scm/provider.go
index 4e40150fe..de01baec0 100644
--- a/src/control/server/storage/scm/provider.go
+++ b/src/control/server/storage/scm/provider.go
@@ -418,6 +418,10 @@ func (p *Provider) createScanResponse() *ScanResponse {
 
 // Scan attempts to scan the system for SCM storage components.
 func (p *Provider) Scan(req ScanRequest) (*ScanResponse, error) {
+	p.log.Info("SCM scan disabled on endeavour")
+	return p.createScanResponse(), nil
+
+	// endeavour hack -- don't ever try to scan
 	if p.isInitialized() && !req.Rescan {
 		return p.createScanResponse(), nil
 	}
-- 
2.26.2

