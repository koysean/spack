From c6c240b7d52ff18bdfbebecda5a55c089ee845b0 Mon Sep 17 00:00:00 2001
From: Michael MacDonald <mjmac.macdonald@intel.com>
Date: Thu, 20 Feb 2020 14:20:37 -0500
Subject: [PATCH] HACK: Allow forwarding to be disabled

Apply this patch against master in order to remove a hard requirement
on forwarding requests to daos_admin. As before,
DAOS_DISABLE_REQ_FWD=true will disable forwarding to daos_admin.

Please note that this is an unsupported configuration, and future work
will likely remove all ability for daos_server to operate independently
of daos_admin.

HACK: Disable automatic NVMe prepare on startup

HACK: Disable SCM/NVMe scanning

HACK: Don't check daos_admin

Signed-off-by: Michael MacDonald <mjmac.macdonald@intel.com>
Signed-off-by: Dalton Bohning <daltonx.bohning@intel.com>
---
 src/control/cmd/daos_server/main.go        |  5 ++---
 src/control/pbin/forwarding.go             | 11 +++++++++++
 src/control/pbin/pbin.go                   |  8 ++++++++
 src/control/server/ctl_storage.go          |  3 +++
 src/control/server/server.go               | 10 +++++-----
 src/control/server/storage/provider.go     |  5 +++++
 src/control/server/storage/scm/provider.go |  3 +++
 7 files changed, 37 insertions(+), 8 deletions(-)

diff --git a/src/control/cmd/daos_server/main.go b/src/control/cmd/daos_server/main.go
index e5f5c68c45..7dbcd0c559 100644
--- a/src/control/cmd/daos_server/main.go
+++ b/src/control/cmd/daos_server/main.go
@@ -20,7 +20,6 @@ import (
 	"github.com/daos-stack/daos/src/control/fault"
 	"github.com/daos-stack/daos/src/control/lib/netdetect"
 	"github.com/daos-stack/daos/src/control/logging"
-	"github.com/daos-stack/daos/src/control/pbin"
 )
 
 const (
@@ -144,9 +143,9 @@ func main() {
 	var opts mainOpts
 
 	// Check this right away to avoid lots of annoying failures later.
-	if err := pbin.CheckHelper(log, pbin.DaosAdminName); err != nil {
+	/*if err := pbin.CheckHelper(log, pbin.DaosAdminName); err != nil {
 		exitWithError(log, err)
-	}
+	}*/
 
 	if err := parseOpts(os.Args[1:], &opts, log); err != nil {
 		if errors.Cause(err) == context.Canceled {
diff --git a/src/control/pbin/forwarding.go b/src/control/pbin/forwarding.go
index d658344ca8..cba190639f 100644
--- a/src/control/pbin/forwarding.go
+++ b/src/control/pbin/forwarding.go
@@ -9,6 +9,7 @@ import (
 	"context"
 	"encoding/json"
 	"os"
+	"strconv"
 
 	"github.com/pkg/errors"
 
@@ -52,6 +53,16 @@ func NewForwarder(log logging.Logger, pbinName string) *Forwarder {
 		pbinName: pbinName,
 	}
 
+	if val, set := os.LookupEnv(DisableReqFwdEnvVar); set {
+		disabled, err := strconv.ParseBool(val)
+		if err != nil {
+			log.Errorf("%s was set to non-boolean value (%q); not disabling",
+				DisableReqFwdEnvVar, val)
+			return fwd
+		}
+		fwd.Disabled = disabled
+	}
+
 	return fwd
 }
 
diff --git a/src/control/pbin/pbin.go b/src/control/pbin/pbin.go
index 756497d13d..ef7ee48812 100644
--- a/src/control/pbin/pbin.go
+++ b/src/control/pbin/pbin.go
@@ -19,6 +19,10 @@ const (
 	// DaosAdminName is the name of the daos_admin privileged helper.
 	DaosAdminName = "daos_admin"
 
+	// DisableReqFwdEnvVar is the name of the environment variable which
+	// can be set to disable forwarding requests to the privileged binary.
+	DisableReqFwdEnvVar = "DAOS_DISABLE_REQ_FWD"
+
 	// DaosAdminLogFileEnvVar is the name of the environment variable which
 	// can be set to enable non-ERROR logging in the privileged binary.
 	DaosAdminLogFileEnvVar = "DAOS_ADMIN_LOG_FILE"
@@ -46,6 +50,10 @@ func CheckHelper(log logging.Logger, helperName string) error {
 	dummy := struct{}{}
 	pingRes := PingResp{}
 
+	if fwd.Disabled {
+		return nil
+	}
+
 	if err := fwd.SendReq("Ping", dummy, &pingRes); err != nil {
 		err = errors.Cause(err)
 		switch {
diff --git a/src/control/server/ctl_storage.go b/src/control/server/ctl_storage.go
index ddbe883477..b55b28e9a3 100644
--- a/src/control/server/ctl_storage.go
+++ b/src/control/server/ctl_storage.go
@@ -28,6 +28,9 @@ type StorageControlService struct {
 
 // Setup performs storage discovery and validates existence of configured devices.
 func (scs *StorageControlService) Setup() {
+	// Don't scan anything.
+	return
+
 	if _, err := scs.ScmScan(storage.ScmScanRequest{}); err != nil {
 		scs.log.Debugf("%s\n", errors.Wrap(err, "Warning, SCM Scan"))
 	}
diff --git a/src/control/server/server.go b/src/control/server/server.go
index 11743afe49..4a4554a42c 100644
--- a/src/control/server/server.go
+++ b/src/control/server/server.go
@@ -20,7 +20,6 @@ import (
 	"google.golang.org/grpc"
 
 	"github.com/daos-stack/daos/src/control/build"
-	"github.com/daos-stack/daos/src/control/common"
 	ctlpb "github.com/daos-stack/daos/src/control/common/proto/ctl"
 	mgmtpb "github.com/daos-stack/daos/src/control/common/proto/mgmt"
 	"github.com/daos-stack/daos/src/control/events"
@@ -213,9 +212,9 @@ func (srv *server) initNetwork(ctx context.Context) error {
 func (srv *server) initStorage() error {
 	defer srv.logDuration(track("time to init storage"))
 
-	if err := prepBdevStorage(srv, iommuDetected(), common.GetHugePageInfo); err != nil {
+	/*if err := prepBdevStorage(srv, iommuDetected(), common.getHugePageInfo); err != nil {
 		return err
-	}
+	}*/
 
 	srv.log.Debug("running storage setup on server start-up, scanning storage devices")
 	srv.ctlSvc.Setup()
@@ -251,11 +250,12 @@ func (srv *server) addEngines(ctx context.Context) error {
 	// Store cached NVMe device details retrieved on start-up (before
 	// engines are started) so static details can be recovered by the engine
 	// storage provider(s) during scan even if devices are in use.
-	nvmeScanResp, err := srv.ctlSvc.NvmeScan(storage.BdevScanRequest{})
+	nvmeScanResp := &storage.BdevScanResponse{}
+	/*nvmeScanResp, err := srv.ctlSvc.NvmeScan(storage.BdevScanRequest{})
 	if err != nil {
 		srv.log.Errorf("nvme scan failed: %s", err)
 		nvmeScanResp = &storage.BdevScanResponse{}
-	}
+	}*/
 	if nvmeScanResp == nil {
 		return errors.New("nil nvme scan response received")
 	}
diff --git a/src/control/server/storage/provider.go b/src/control/server/storage/provider.go
index 8358799dc9..6c2869bdda 100644
--- a/src/control/server/storage/provider.go
+++ b/src/control/server/storage/provider.go
@@ -153,6 +153,9 @@ func createScmFormatRequest(class Class, scmCfg ScmConfig, force bool) (*ScmForm
 
 // ScmNeedsFormat returns true if SCM is found to require formatting.
 func (p *Provider) ScmNeedsFormat() (bool, error) {
+	// Don't perform a SCM scan.
+	return false, nil
+
 	cfg, err := p.GetScmConfig()
 	if err != nil {
 		return false, err
@@ -177,6 +180,8 @@ func (p *Provider) ScmNeedsFormat() (bool, error) {
 
 // FormatScm formats SCM based on provider config and force flag.
 func (p *Provider) FormatScm(force bool) error {
+	// Don't scan anything.
+	return nil
 	cfg, err := p.GetScmConfig()
 	if err != nil {
 		return err
diff --git a/src/control/server/storage/scm/provider.go b/src/control/server/storage/scm/provider.go
index bc4d5cc6d7..e74f6306db 100644
--- a/src/control/server/storage/scm/provider.go
+++ b/src/control/server/storage/scm/provider.go
@@ -324,6 +324,9 @@ func (p *Provider) createScanResponse() *storage.ScmScanResponse {
 
 // Scan attempts to scan the system for SCM storage components.
 func (p *Provider) Scan(req storage.ScmScanRequest) (*storage.ScmScanResponse, error) {
+	// Don't perform a SCM scan.
+	return p.createScanResponse(), nil
+
 	if p.isInitialized() && !req.Rescan {
 		return p.createScanResponse(), nil
 	}
-- 
2.34.1

