From fb424036f3e6beac879c076f635e828aff13d300 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Thu, 19 Nov 2020 15:59:50 -0600
Subject: [PATCH] Squashed commit of the following:

commit 0114f9a6b40e5a5b4d4ad0e7886f95bfa6317e19
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Tue Oct 27 15:38:20 2020 -0400

    Add --force to daos_ssd format cmd

commit 1161d065973f2ec4c289c1a54f068007c411e51d
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Tue Oct 27 12:41:08 2020 -0400

    Added daos_ssd utility to format NVMe SSDs

    Usage:
      daos_ssd format -p <addr> -p <addr>
    -- or --
      daos_ssd -o /path/to/server.yml format

commit a18de8c904631ffb38e7caff9e84583c1f1ca678
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Thu Oct 22 15:45:30 2020 -0400

    more hax

    Make StorageControlService.Setup() return early before talking
    to SPDK -- this won't work without the daos_admin process
    separation.

commit 42201e9cb805167349379c8c90ab8a4343b36ecd
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Fri Oct 16 12:16:39 2020 -0400

    don't try to scan SCM

commit bd4ea9088fbb802d87bef81087dfc8f744291f29
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Thu Oct 15 16:28:09 2020 -0400

    disable automatic NVMe prepare

commit ac21f2c1ecab8e4ff8ec48247c62f07a3344e1cd
Author: Michael MacDonald <mjmac.macdonald@intel.com>
Date:   Thu Feb 20 14:20:37 2020 -0500

    TACC: Allow forwarding to be disabled

    Apply this patch against release/0.9 (may work with master, untested)
    in order to remove a hard requirement on forwarding requests to
    daos_admin. As before, DAOS_DISABLE_REQ_FWD=true will disable forwarding
    to daos_admin.

    Please note that this is an unsupported configuration, and future work
    will likely remove all ability for daos_server to operate independently
    of daos_admin.
---
 src/control/SConscript                     |   4 +-
 src/control/cmd/daos_ssd/config.go         |  70 ++++++++++++
 src/control/cmd/daos_ssd/main.go           | 124 +++++++++++++++++++++
 src/control/cmd/daos_ssd/storage.go        | 100 +++++++++++++++++
 src/control/pbin/forwarding.go             |  11 ++
 src/control/pbin/pbin.go                   |   8 ++
 src/control/server/ctl_storage.go          |   3 +
 src/control/server/server.go               |  23 ++--
 src/control/server/storage/scm/provider.go |   4 +
 9 files changed, 337 insertions(+), 10 deletions(-)
 create mode 100644 src/control/cmd/daos_ssd/config.go
 create mode 100644 src/control/cmd/daos_ssd/main.go
 create mode 100644 src/control/cmd/daos_ssd/storage.go

diff --git a/src/control/pbin/forwarding.go b/src/control/pbin/forwarding.go
index cb831195d..dca863a21 100644
--- a/src/control/pbin/forwarding.go
+++ b/src/control/pbin/forwarding.go
@@ -26,6 +26,7 @@ import (
 	"context"
 	"encoding/json"
 	"os"
+	"strconv"
 
 	"github.com/pkg/errors"
 
@@ -69,6 +70,16 @@ func NewForwarder(log logging.Logger, pbinName string) *Forwarder {
 		pbinName: pbinName,
 	}
 
+	if val, set := os.LookupEnv(DisableReqFwdEnvVar); set {
+		disabled, err := strconv.ParseBool(val)
+		if err != nil {
+			log.Errorf("%s was set to non-boolean value (%q); not disabling",
+				DisableReqFwdEnvVar, val)
+			return fwd
+		}
+		fwd.Disabled = disabled
+	}
+
 	return fwd
 }
 
diff --git a/src/control/pbin/pbin.go b/src/control/pbin/pbin.go
index 4bd705883..0ac91698e 100644
--- a/src/control/pbin/pbin.go
+++ b/src/control/pbin/pbin.go
@@ -36,6 +36,10 @@ const (
 	// DaosAdminName is the name of the daos_admin privileged helper.
 	DaosAdminName = "daos_admin"
 
+	// DisableReqFwdEnvVar is the name of the environment variable which
+	// can be set to disable forwarding requests to the privileged binary.
+	DisableReqFwdEnvVar = "DAOS_DISABLE_REQ_FWD"
+
 	// DaosAdminLogFileEnvVar is the name of the environment variable which
 	// can be set to enable non-ERROR logging in the privileged binary.
 	DaosAdminLogFileEnvVar = "DAOS_ADMIN_LOG_FILE"
@@ -63,6 +67,10 @@ func CheckHelper(log logging.Logger, helperName string) error {
 	dummy := struct{}{}
 	pingRes := PingResp{}
 
+	if fwd.Disabled {
+		return nil
+	}
+
 	if err := fwd.SendReq("Ping", dummy, &pingRes); err != nil {
 		err = errors.Cause(err)
 		switch {
diff --git a/src/control/server/ctl_storage.go b/src/control/server/ctl_storage.go
index dd189e26e..2a5b4e035 100644
--- a/src/control/server/ctl_storage.go
+++ b/src/control/server/ctl_storage.go
@@ -139,6 +139,9 @@ func (c *StorageControlService) canAccessBdevs(sr *bdev.ScanResponse) (missing [
 
 // Setup delegates to Storage implementation's Setup methods.
 func (c *StorageControlService) Setup() error {
+	c.log.Error("Setup() not supported on Endeavour")
+	return nil
+
 	if _, err := c.ScmScan(scm.ScanRequest{}); err != nil {
 		c.log.Debugf("%s\n", errors.Wrap(err, "Warning, SCM Scan"))
 	}
diff --git a/src/control/server/server.go b/src/control/server/server.go
index 0a35de941..e30582bfe 100644
--- a/src/control/server/server.go
+++ b/src/control/server/server.go
@@ -176,22 +176,27 @@ func Start(log *logging.LeveledLogger, cfg *config.Server) error {
 		}
 	}
 
-	log.Debugf("automatic NVMe prepare req: %+v", prepReq)
-	if _, err := bdevProvider.Prepare(prepReq); err != nil {
-		log.Errorf("automatic NVMe prepare failed (check configuration?)\n%s", err)
-	}
+	/*
+		log.Debugf("automatic NVMe prepare req: %+v", prepReq)
+		if _, err := bdevProvider.Prepare(prepReq); err != nil {
+			log.Errorf("automatic NVMe prepare failed (check configuration?)\n%s", err)
+		}
+	*/
+	log.Info("automatic NVMe prepare disabled on Endeavour")
 
 	hugePages, err := getHugePageInfo()
 	if err != nil {
 		return errors.Wrap(err, "unable to read system hugepage info")
 	}
 
-	if cfgHasBdev(cfg) {
-		// Double-check that we got the requested number of huge pages after prepare.
-		if hugePages.Free < prepReq.HugePageCount {
-			return FaultInsufficientFreeHugePages(hugePages.Free, prepReq.HugePageCount)
+	/*
+		if cfgHasBdev(cfg) {
+			// Double-check that we got the requested number of huge pages after prepare.
+			if hugePages.Free < prepReq.HugePageCount {
+				return FaultInsufficientFreeHugePages(hugePages.Free, prepReq.HugePageCount)
+			}
 		}
-	}
+	*/
 
 	var dbReplicas []*net.TCPAddr
 	for _, ap := range cfg.AccessPoints {
diff --git a/src/control/server/storage/scm/provider.go b/src/control/server/storage/scm/provider.go
index 2dd9bfc73..28004e253 100644
--- a/src/control/server/storage/scm/provider.go
+++ b/src/control/server/storage/scm/provider.go
@@ -420,6 +420,10 @@ func (p *Provider) createScanResponse() *ScanResponse {
 
 // Scan attempts to scan the system for SCM storage components.
 func (p *Provider) Scan(req ScanRequest) (*ScanResponse, error) {
+	p.log.Info("SCM scan disabled on endeavour")
+	return p.createScanResponse(), nil
+
+	// endeavour hack -- don't ever try to scan
 	if p.isInitialized() && !req.Rescan {
 		return p.createScanResponse(), nil
 	}
-- 
2.26.2

